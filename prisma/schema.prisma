generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String // "oauth" for Google, "guest" for guest
  provider          String // "google" or "guest"
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  state         String?
  isGuest       Boolean   @default(false)
  guestId       String?   @unique
  createdAt     DateTime  @default(now())
  lastLoginAt   DateTime  @updatedAt

  chats Chat[]
}

model Chat {
  id        String   @id @default(cuid())
  roomId    String
  chatType  ChatType @default(GENERAL) // Enum for chat types
  metadata  Json?
  title     String?
  summary   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId])
  @@index([userId])
  @@index([chatType])
}

model AnonymousUsage {
  id        String   @id @default(cuid())
  hash      String   @unique
  chatCount Int      @default(0)
  firstSeen DateTime @default(now())
  lastSeen  DateTime @updatedAt

  @@index([hash])
}

enum ChatType {
  GENERAL
  BILL
}
